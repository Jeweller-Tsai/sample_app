{"name":"Sample app","body":"== Welcome to Rails\r\n\r\nRails is a web-application framework that includes everything needed to create\r\ndatabase-backed web applications according to the Model-View-Control pattern.\r\n\r\nThis pattern splits the view (also called the presentation) into \"dumb\"\r\ntemplates that are primarily responsible for inserting pre-built data in between\r\nHTML tags. The model contains the \"smart\" domain objects (such as Account,\r\nProduct, Person, Post) that holds all the business logic and knows how to\r\npersist themselves to a database. The controller handles the incoming requests\r\n(such as Save New Account, Update Product, Show Post) by manipulating the model\r\nand directing data to the view.\r\n\r\nIn Rails, the model is handled by what's called an object-relational mapping\r\nlayer entitled Active Record. This layer allows you to present the data from\r\ndatabase rows as objects and embellish these data objects with business logic\r\nmethods. You can read more about Active Record in\r\nlink:files/vendor/rails/activerecord/README.html.\r\n\r\nThe controller and view are handled by the Action Pack, which handles both\r\nlayers by its two parts: Action View and Action Controller. These two layers\r\nare bundled in a single package due to their heavy interdependence. This is\r\nunlike the relationship between the Active Record and Action Pack that is much\r\nmore separate. Each of these packages can be used independently outside of\r\nRails. You can read more about Action Pack in\r\nlink:files/vendor/rails/actionpack/README.html.\r\n\r\n\r\n== Getting Started\r\n\r\n1. At the command prompt, create a new Rails application:\r\n       <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)\r\n\r\n2. Change directory to <tt>myapp</tt> and start the web server:\r\n       <tt>cd myapp; rails server</tt> (run with --help for options)\r\n\r\n3. Go to http://localhost:3000/ and you'll see:\r\n       \"Welcome aboard: You're riding Ruby on Rails!\"\r\n\r\n4. Follow the guidelines to start developing your application. You can find\r\nthe following resources handy:\r\n\r\n* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html\r\n* Ruby on Rails Tutorial Book: http://www.railstutorial.org/\r\n\r\n\r\n== Debugging Rails\r\n\r\nSometimes your application goes wrong. Fortunately there are a lot of tools that\r\nwill help you debug it and get it back on the rails.\r\n\r\nFirst area to check is the application log files. Have \"tail -f\" commands\r\nrunning on the server.log and development.log. Rails will automatically display\r\ndebugging and runtime information to these files. Debugging info will also be\r\nshown in the browser on requests from 127.0.0.1.\r\n\r\nYou can also log your own messages directly into the log file from your code\r\nusing the Ruby logger class from inside your controllers. Example:\r\n\r\n  class WeblogController < ActionController::Base\r\n    def destroy\r\n      @weblog = Weblog.find(params[:id])\r\n      @weblog.destroy\r\n      logger.info(\"#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\")\r\n    end\r\n  end\r\n\r\nThe result will be a message in your log file along the lines of:\r\n\r\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!\r\n\r\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\r\n\r\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/. There are\r\nseveral books available online as well:\r\n\r\n* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)\r\n* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)\r\n\r\nThese two books will bring you up to speed on the Ruby language and also on\r\nprogramming in general.\r\n\r\n\r\n== Debugger\r\n\r\nDebugger support is available through the debugger command when you start your\r\nMongrel or WEBrick server with --debugger. This means that you can break out of\r\nexecution at any point in the code, investigate and change the model, and then,\r\nresume execution! You need to install ruby-debug to run the server in debugging\r\nmode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:\r\n\r\n  class WeblogController < ActionController::Base\r\n    def index\r\n      @posts = Post.find(:all)\r\n      debugger\r\n    end\r\n  end\r\n\r\nSo the controller will accept the action, run the first line, then present you\r\nwith a IRB prompt in the server window. Here you can do things like:\r\n\r\n  >> @posts.inspect\r\n  => \"[#<Post:0x14a6be8\r\n          @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>,\r\n       #<Post:0x14a6620\r\n          @attributes={\"title\"=>\"Rails\", \"body\"=>\"Only ten..\", \"id\"=>\"2\"}>]\"\r\n  >> @posts.first.title = \"hello from a debugger\"\r\n  => \"hello from a debugger\"\r\n\r\n...and even better, you can examine how your runtime objects actually work:\r\n\r\n  >> f = @posts.first\r\n  => #<Post:0x13630c4 @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>\r\n  >> f.\r\n  Display all 152 possibilities? (y or n)\r\n\r\nFinally, when you're ready to resume execution, you can enter \"cont\".\r\n\r\n\r\n== Console\r\n\r\nThe console is a Ruby shell, which allows you to interact with your\r\napplication's domain model. Here you'll have all parts of the application\r\nconfigured, just like it is when the application is running. You can inspect\r\ndomain models, change values, and save to the database. Starting the script\r\nwithout arguments will launch it in the development environment.\r\n\r\nTo start the console, run <tt>rails console</tt> from the application\r\ndirectory.\r\n\r\nOptions:\r\n\r\n* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications\r\n  made to the database.\r\n* Passing an environment name as an argument will load the corresponding\r\n  environment. Example: <tt>rails console production</tt>.\r\n\r\nTo reload your controllers and models after launching the console run\r\n<tt>reload!</tt>\r\n\r\nMore information about irb can be found at:\r\nlink:http://www.rubycentral.com/pickaxe/irb.html\r\n\r\n\r\n== dbconsole\r\n\r\nYou can go to the command line of your database directly through <tt>rails\r\ndbconsole</tt>. You would be connected to the database with the credentials\r\ndefined in database.yml. Starting the script without arguments will connect you\r\nto the development database. Passing an argument will connect you to a different\r\ndatabase, like <tt>rails dbconsole production</tt>. Currently works for MySQL,\r\nPostgreSQL and SQLite 3.\r\n\r\n== Description of Contents\r\n\r\nThe default directory structure of a generated Ruby on Rails application:\r\n\r\n  |-- app\r\n  |   |-- controllers\r\n  |   |-- helpers\r\n  |   |-- mailers\r\n  |   |-- models\r\n  |   `-- views\r\n  |       `-- layouts\r\n  |-- config\r\n  |   |-- environments\r\n  |   |-- initializers\r\n  |   `-- locales\r\n  |-- db\r\n  |-- doc\r\n  |-- lib\r\n  |   `-- tasks\r\n  |-- log\r\n  |-- public\r\n  |   |-- images\r\n  |   |-- javascripts\r\n  |   `-- stylesheets\r\n  |-- script\r\n  |-- test\r\n  |   |-- fixtures\r\n  |   |-- functional\r\n  |   |-- integration\r\n  |   |-- performance\r\n  |   `-- unit\r\n  |-- tmp\r\n  |   |-- cache\r\n  |   |-- pids\r\n  |   |-- sessions\r\n  |   `-- sockets\r\n  `-- vendor\r\n      `-- plugins\r\n\r\napp\r\n  Holds all the code that's specific to this particular application.\r\n\r\napp/controllers\r\n  Holds controllers that should be named like weblogs_controller.rb for\r\n  automated URL mapping. All controllers should descend from\r\n  ApplicationController which itself descends from ActionController::Base.\r\n\r\napp/models\r\n  Holds models that should be named like post.rb. Models descend from\r\n  ActiveRecord::Base by default.\r\n\r\napp/views\r\n  Holds the template files for the view that should be named like\r\n  weblogs/index.html.erb for the WeblogsController#index action. All views use\r\n  eRuby syntax by default.\r\n\r\napp/views/layouts\r\n  Holds the template files for layouts to be used with views. This models the\r\n  common header/footer method of wrapping views. In your views, define a layout\r\n  using the <tt>layout :default</tt> and create a file named default.html.erb.\r\n  Inside default.html.erb, call <% yield %> to render the view using this\r\n  layout.\r\n\r\napp/helpers\r\n  Holds view helpers that should be named like weblogs_helper.rb. These are\r\n  generated for you automatically when using generators for controllers.\r\n  Helpers can be used to wrap functionality for your views into methods.\r\n\r\nconfig\r\n  Configuration files for the Rails environment, the routing map, the database,\r\n  and other dependencies.\r\n\r\ndb\r\n  Contains the database schema in schema.rb. db/migrate contains all the\r\n  sequence of Migrations for your schema.\r\n\r\ndoc\r\n  This directory is where your application documentation will be stored when\r\n  generated using <tt>rake doc:app</tt>\r\n\r\nlib\r\n  Application specific libraries. Basically, any kind of custom code that\r\n  doesn't belong under controllers, models, or helpers. This directory is in\r\n  the load path.\r\n\r\npublic\r\n  The directory available for the web server. Contains subdirectories for\r\n  images, stylesheets, and javascripts. Also contains the dispatchers and the\r\n  default HTML files. This should be set as the DOCUMENT_ROOT of your web\r\n  server.\r\n\r\nscript\r\n  Helper scripts for automation and generation.\r\n\r\ntest\r\n  Unit and functional tests along with fixtures. When using the rails generate\r\n  command, template test files will be generated for you and placed in this\r\n  directory.\r\n\r\nvendor\r\n  External libraries that the application depends on. Also includes the plugins\r\n  subdirectory. If the app has frozen rails, those gems also go here, under\r\n  vendor/rails/. This directory is in the load path.\r\n","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}